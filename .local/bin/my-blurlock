#!/usr/bin/env perl

# Copyright (C) 2023-2024 jtmr05

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.

use v5.36;
use autodie;

use Image::Magick;

sub get_screen_resolution(){

    open my $pipe, '-|', 'xrandr -q';

    while(<$pipe>){
        return "$1x$2" if(m/.*current\s(\d+)\sx\s(\d+),.*/);
    }

    return undef;
}


use constant IMAGE_PATH               => "/tmp/my-blurlock-$$.jpeg";
use constant ICON_PATH                => "$ENV{HOME}/.local/share/i3lock/lock.png";
use constant DARK_ICON_PATH           => "$ENV{HOME}/.local/share/i3lock/lockdark.png";

use constant HEX8_MAX_VALUE           => hex 'ff';
use constant HEX16_MAX_VALUE          => hex 'ffff';
use constant HEX32_MAX_VALUE          => hex 'ffffffff';
use constant HEX32_MAX_VALUE_NO_ALPHA => hex 'ffffff00';
use constant MIDDLE_GRAY              => hex '7f7f7f7f';

use constant RESOLUTION               => get_screen_resolution();
use constant WIDTH                    => (split 'x', RESOLUTION)[0];
use constant HEIGHT                   => (split 'x', RESOLUTION)[1];



my @COLOR_PARAMS = (
    'ffffff1c', 'ffffff3e', 'ffffff00', '00000080',
    '00000000', '22222260', '0000001c', '00000055',
    '0000001c', '00000000', 'ff000000', '00000000',
    '00000000', '00000000'
);



sub load_image($filename){
    my $img = Image::Magick->new();
    open my $image_fh, '<', $filename;
    $img->Read(file => \$image_fh);
    return $img;
}

sub store_image($img, $filename){
    open my $image_fh, '>', $filename;
    $img->Write(file => \$image_fh, filename => $filename);
}


# returns 1 if black scheme is used, 0 if white
sub make_black_scheme(){

    my $center = load_image(IMAGE_PATH);

    use constant SIDE => 400;
    use constant HALF_WIDTH  => WIDTH  / 2 - SIDE / 2;
    use constant HALF_HEIGHT => HEIGHT / 2 - SIDE / 2;

    $center->Crop(
        geometry => SIDE . 'x' . SIDE . '+' . HALF_WIDTH . '+' . HALF_HEIGHT
    );

    $center->Resize(
        width  => 1,
        height => 1,
    );


    # Get('pixel[x,y]') returns a comma separated list of 16-bit values (per channel)
    my @average_color_array = split ',', $center->Get('pixel[0,0]');
    my $average_color = '';

    foreach(@average_color_array){

        m/(\d+)(\.(\d+))?/;

        $average_color .= sprintf '%.2x', ($1 / HEX16_MAX_VALUE) * HEX8_MAX_VALUE;
    }


    return 0 if(hex $average_color < MIDDLE_GRAY);


    foreach(@COLOR_PARAMS){

        my $this_alpha = '000000' . substr $_, -2, 2;

        # conserve original alpha channel
        $_ = sprintf '%.8x',
            HEX32_MAX_VALUE_NO_ALPHA
            + (hex $this_alpha)
            - (hex $_)
            + (hex $this_alpha);
    }

    return 1;
}

sub composite_lock_image($scrot, $is_black){

    my $lock_img = load_image($is_black ? DARK_ICON_PATH : ICON_PATH);
    $scrot->Composite(
        image   => $lock_img,
        gravity => 'Center',
        compose => 'Atop'
    );
}

sub generate_final_image($is_black){

    my $scrot = load_image(IMAGE_PATH);

    $scrot->Scale(geometry  => '20%');
    $scrot->Blur(geometry   => '0x2.5');
    $scrot->Resize(geometry => '500%');
    $scrot->Annotate(
        pointsize => 26,
        fill      => ($is_black ? 'black' : 'white'),
        geometry  => '+0+160',
        gravity   => 'Center',
        text      => 'Type your password to unlock',
        font      => 'DejaVu-Sans',
    );
    composite_lock_image($scrot, $is_black);

    store_image($scrot, IMAGE_PATH);
}

sub make_screenshot(){
    my $scrot = Image::Magick->new();
    $scrot->Read('x:root');
    $scrot->Write(IMAGE_PATH);
    undef $scrot;
}

sub main(){

    make_screenshot();

    my $is_black = make_black_scheme();
    generate_final_image($is_black);

    my $i3lock_params =
        "--inside-color="      . "$COLOR_PARAMS[0]  " .
        "--ring-color="        . "$COLOR_PARAMS[1]  " .
        "--line-color="        . "$COLOR_PARAMS[2]  " .
        "--keyhl-color="       . "$COLOR_PARAMS[3]  " .
        "--ringver-color="     . "$COLOR_PARAMS[4]  " .
        "--separator-color="   . "$COLOR_PARAMS[5]  " .
        "--insidever-color="   . "$COLOR_PARAMS[6]  " .
        "--ringwrong-color="   . "$COLOR_PARAMS[7]  " .
        "--insidewrong-color=" . "$COLOR_PARAMS[8]  " .
        "--verif-color="       . "$COLOR_PARAMS[9]  " .
        "--wrong-color="       . "$COLOR_PARAMS[10] " .
        "--time-color="        . "$COLOR_PARAMS[11] " .
        "--date-color="        . "$COLOR_PARAMS[12] " .
        "--layout-color="      . "$COLOR_PARAMS[13] ";
        #"--layout-color="      . "$COLOR_PARAMS[13] --no-verify";

    system 'i3lock -i ' . IMAGE_PATH . " -e $i3lock_params";

    unlink IMAGE_PATH;
}

main();
