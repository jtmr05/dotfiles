#!/bin/sh

# Copyright (C) 2023-2024 jtmr05

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.

SCRIPT_NAME="${0##*/}"

LOW_VOLUME_ICON='audio-volume-low'
MEDIUM_VOLUME_ICON='audio-volume-medium'
HIGH_VOLUME_ICON='audio-volume-high'
MUTED_VOLUME_ICON='audio-volume-muted'

LOW_VOLUME=35
HIGH_VOLUME=75

PROGRESS_BAR_LEN=23
FULL_BOCK='▄'
EMPTY_BOCK='▁'

usage(){
    echo "Usage: $SCRIPT_NAME [OPTION]... OPERAND"
    echo 'Simple Pulseaudio output volume management.'
    echo ''
    echo 'Available operands:'
    echo '  mute'
    echo '  unmute'
    echo '  toggle    toggle between muted and unmuted'
    echo '  [+|-]NUM  set volume to, increase by, or decrease by NUM'
    echo '            according to the given sign or lack thereof'
    echo ''
    echo 'Availabe options:'
    echo '  -h        print this message and exit'

    exit 0
}

try(){
    echo "Try '$SCRIPT_NAME -h' for more information" > /dev/stderr
    exit 1
}

# https://unix.stackexchange.com/questions/598036/how-to-check-if-variable-is-integer-avoid-problem-with-spaces-around-in-posix
# 1 is false in shell scripting!
is_integer(){
    case "${1#[+-]}" in
        *[!0-9]*)
            return 1
            ;;
        '')
            return 1
            ;;
        *)
            return 0
            ;;
    esac
}

# load array manipulation utility functions
. "$HOME/.local/lib/array.sh"

index=1; while [ "$index" -le $# ]; do

    elem="$(eval "$(array_index "$index")")"
    case "$elem" in
        '-')
            echo "$SCRIPT_NAME: warning: single dash ignored" > /dev/stderr
            eval "$(array_remove "$index" "$@")"
            ;;
        -*)
            if is_integer "$elem"; then
                index=$((index + 1))
                continue
            fi
            eval "$(array_remove "$index" "$@")"
            opts="${elem#-}"

            while [ -n "$opts" ]; do
                opt=$(printf '%c' "$opts")
                case "$opt" in
                    'h')
                        usage
                        ;;
                    *)
                        echo "$SCRIPT_NAME: '-$opt': unrecognized option" > /dev/stderr
                        try
                        ;;
                esac
                # unreachable with current options available
                # commented out to keep ShellCheck happy
                #opts="${opts#"$opt"}"
            done
            ;;
        *)
            index=$((index + 1))
            ;;
    esac
done

if [ $# -eq 0 ]; then
    echo "$SCRIPT_NAME: missing operand" > /dev/stderr
    try
fi

if [ $# -gt 1 ]; then
    echo "$SCRIPT_NAME: '$2': extra operand" > /dev/stderr
    try
fi

# prints the volume after handling and
# returns wether it is muted or not
handle_arg(){
    case "$1" in
        'mute')
            pamixer -m
            ;;
        'unmute')
            pamixer -u
            ;;
        'toggle')
            pamixer -t
            ;;
        *)
            is_integer "$1" || { echo "$SCRIPT_NAME: '$1': invalid operand" && exit 2; }
            sign=$(printf '%c' "$1")
            arg="${1#[+-]}"

            case "$sign" in
                '+')
                    pamixer -i "$arg"
                    ;;
                '-')
                    pamixer -d "$arg"
                    ;;
                *)
                    pamixer --set-volume "$arg"
                    ;;
            esac
            ;;
    esac > /dev/null

    # print volume
    pamixer --get-volume
    { [ "$(pamixer --get-volume-human)" = 'muted' ] && return 0; } || return 1
}

volume="$(handle_arg "$1")"
is_muted=$?

if [ "$is_muted" -eq 0 ]; then
    icon="$MUTED_VOLUME_ICON"
elif [ "$volume" -le "$LOW_VOLUME" ]; then
    icon="$LOW_VOLUME_ICON"
elif [ "$volume" -ge "$HIGH_VOLUME" ]; then
    icon="$HIGH_VOLUME_ICON"
else
    icon="$MEDIUM_VOLUME_ICON"
fi

blocks_end=$((volume * PROGRESS_BAR_LEN / 100))

index=0; while [ "$index" -lt "$blocks_end" ]; do
    progress_bar="${progress_bar}$FULL_BOCK"
    index=$((index + 1))
done

while [ "$index" -lt "$PROGRESS_BAR_LEN" ]; do
    progress_bar="${progress_bar}$EMPTY_BOCK"
    index=$((index + 1))
done

echo "$progress_bar" >&2

# FIXME use -p to get notification id and then replace subsquent notifications that way
# perhaps using a "global" named FIFO
exec notify-send -r 777 --app-name="$SCRIPT_NAME" -i "$icon" 'Volume' "$volume%\n$progress_bar"
