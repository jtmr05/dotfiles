#!/bin/sh

# Copyright (C) 2023-2024 jtmr05

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.

SCRIPT_NAME="${0##*/}"

usage(){
    echo "Usage: $SCRIPT_NAME [OPTION]... [--] FILE..."
    echo 'Convert Jupyter Notebook cell-style scripts to regular scripts.'
    echo 'New files will be of the form {BASE_NAME}_script{.EXT}.'
    echo ''
    echo 'Available options:'
    echo '  -f        override existing output files'
    echo '  -h        print this message and exit'

    exit 0
}

try(){
    echo "Try '$SCRIPT_NAME -h' for more information" > /dev/stderr
    exit 1
}

# load array manipulation utility functions
. "$HOME/.local/lib/array.sh"

# options
force=0

index=1; while [ "$index" -le $# ]; do

    elem="$(eval "$(array_index "$index")")"
    case "$elem" in
        '-')
            echo "$SCRIPT_NAME: warning: single dash ignored" > /dev/stderr
            eval "$(array_remove "$index" "$@")"
            ;;
        -*)
            eval "$(array_remove "$index" "$@")"
            opts="${elem#-}"

            while [ -n "$opts" ]; do
                opt=$(printf '%c' "$opts")
                case "$opt" in
                    'f')
                        force=1
                        ;;
                    'h')
                        usage
                        ;;
                    '-')
                        break 2
                        ;;
                    *)
                        echo "$SCRIPT_NAME: '-$opt': unrecognized option" > /dev/stderr
                        try
                        ;;
                esac
                opts="${opts#"$opt"}"
            done
            ;;
        *)
            index=$((index+1))
            ;;
    esac
done

if [ $# -eq 0 ]; then
    echo "$SCRIPT_NAME: missing operand" > /dev/stderr
    try
fi

max(){
    [ "$1" -gt "$2" ] && return "$1"
    return "$2"
}

exit_code=0

for f in "$@"; do

    if [ ! -e "$f" ]; then
        echo "$SCRIPT_NAME: '$f': no such file or directory" > /dev/stderr
        max "$exit_code" 2
        exit_code=$?
        continue
    fi

    base_name="${f%.*}"
    ext="${f##*.}"
    new_fn="${base_name}_script.$ext"

    if [ "$force" -eq 0 ] && [ -e "$new_fn" ]; then
        echo "$SCRIPT_NAME: '$new_fn': file exists" > /dev/stderr
        max "$exit_code" 3
        exit_code=$?
        continue
    fi

    echo '#!/usr/bin/env python3' > "$new_fn"
    perl -pe 's/^\s*##\s*(BEGIN|END).*$//' "$f" | autopep8 - >> "$new_fn"
    #autopep8 -i "$new_fn"
    chmod +x "$new_fn"
done

exit "$exit_code"
