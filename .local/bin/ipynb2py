#!/usr/bin/env perl

# Copyright (C) 2023-2024 jtmr05

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.

use v5.36;
use JSON;

$0 = (split m|/|, $0)[-1];

sub get_json_str($filename){

    open my $fh, '<', $filename or do {
        warn "$0: $filename: $!"; return undef
    };

    local $/ = undef;

    return <$fh>;
}

sub print_help(){

    say STDERR "$0: missing operand\nusage: $0 FILE...";
}

sub get_output_filename($input_filename){

    if($input_filename =~ m/^(.+?)(\..*)?$/){

        my $suffix_id = 2;
        my $extension = '.py';

        while(-e "$1$extension"){
            $extension = "$suffix_id.py";
            ++$suffix_id;
        }

        return "$1$extension";
    }
}

sub main(){

    do { print_help(); exit 1; } unless(scalar @ARGV > 0);

    foreach my $fn (@ARGV){

        my $json_str = get_json_str($fn) or next;


        my $json_as_hash_ref = undef;

        eval {
            $json_as_hash_ref = JSON::decode_json $json_str;
        }
        or do {
            warn "$0: $fn: Not a JSON file$!"; next;
        };

        my %json_as_hash = %{$json_as_hash_ref};


        my $output_filename = get_output_filename($fn);
        open my $ouput_fh, '>:encoding(utf-8)', $output_filename or die "$!";


        my @cells = @{$json_as_hash{'cells'}};

        for(my $cell_count = 0; $cell_count <= $#cells; ++$cell_count){

            my %cell_hash = %{$cells[$cell_count]};

            my $cell_type = $cell_hash{'cell_type'};
            my $is_code = $cell_type eq 'code';


            say $ouput_fh "## BEGIN cell $cell_count -- $cell_type\n";

            if(ref $cell_hash{'source'} eq 'ARRAY'){

                foreach my $cell_line (@{$cell_hash{'source'}}){
                    say $ouput_fh ($is_code ? '' : '# ') . $cell_line;
                }
            }
            else {
                say $ouput_fh ($is_code ? '' : '# ') . $cell_hash{'source'};
            }

            say $ouput_fh "\n## END cell $cell_count -- $cell_type\n";
        }
    }
}

unless(caller){
    main();
}
