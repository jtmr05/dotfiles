#!/bin/sh

# Copyright (C) 2023-2025 jtmr05

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.

SCRIPT_NAME="${0##*/}"

usage(){
    echo "Usage: $SCRIPT_NAME [OPTION]... [--] PROG [ARGS]..."
    echo "   or: $SCRIPT_NAME [OPTION]... COMMAND_STRING"
    echo 'Silently execute PROG with arguments ARGS.'
    echo ''
    echo 'Available options:'
    echo '  -e FILE   redirect stderr to FILE'
    echo '  -h        print this message and exit'
    echo '  -o FILE   redirect stdout to FILE'

    exit 0
}

try(){
    echo "Try '$SCRIPT_NAME -h' for more information" > /dev/stderr
    exit 1
}

# load array manipulation utility functions
. "$HOME/.local/lib/array.sh"

# options
out_file=/dev/null
err_file=/dev/null

index=1; while [ "$index" -le $# ]; do

    elem="$(eval "$(array_index "$index")")"
    case "$elem" in
        '-')
            echo "$SCRIPT_NAME: warning: single dash ignored" > /dev/stderr
            eval "$(array_remove "$index" "$@")"
            ;;
        -*)
            eval "$(array_remove "$index" "$@")"
            opts="${elem#-}"

            while [ -n "$opts" ]; do
                opt=$(printf '%c' "$opts")
                case "$opt" in
                    'e')
                        elem="$(eval "$(array_index "$index")")"
                        if [ -z "$elem" ]; then
                            echo "$SCRIPT_NAME: '-$opt': option requires an argument" > /dev/stderr
                            try
                        fi
                        eval "$(array_remove "$index" "$@")"
                        err_file="$elem"
                        ;;
                    'h')
                        usage
                        ;;
                    'o')
                        elem="$(eval "$(array_index "$index")")"
                        if [ -z "$elem" ]; then
                            echo "$SCRIPT_NAME: '-$opt': option requires an argument" > /dev/stderr
                            try
                        fi
                        eval "$(array_remove "$index" "$@")"
                        out_file="$elem"
                        ;;
                    '-')
                        break 2
                        ;;
                    *)
                        echo "$SCRIPT_NAME: '-$opt': unrecognized option" > /dev/stderr
                        try
                        ;;
                esac
                opts="${opts#"$opt"}"
            done
            ;;
        *)
            index=$((index+1))
            ;;
    esac
done

if [ $# -eq 0 ]; then
    echo "$SCRIPT_NAME: missing operand" > /dev/stderr
    try
fi

# if ! command -v "$1" > /dev/null 2>&1; then
#     echo "$SCRIPT_NAME: '$1': command not found" > /dev/stderr
#     exit 2
# fi

exit_val=0

[ -e "$out_file" ] || touch "$out_file" || {
    echo "$SCRIPT_NAME: '$out_file': cannot create file" &&
    out_file=/dev/null &&
    exit_val=3
}

[ -e "$err_file" ] || touch "$err_file" || {
    echo "$SCRIPT_NAME: '$err_file': cannot create file" &&
    err_file=/dev/null &&
    exit_val=3
}

[ -w "$out_file" ] || {
    echo "$SCRIPT_NAME: '$out_file': no write permission" &&
    out_file=/dev/null &&
    exit_val=4
}

[ -w "$err_file" ] || {
    echo "$SCRIPT_NAME: '$err_file': no write permission" &&
    err_file=/dev/null &&
    exit_val=4
}

# nohup "$@" > "$out_file" 2> "$err_file" &

# FIXME properly handle shell operators in $@
# set -x
sh -c "{ $*; } > '$out_file' 2> '$err_file' &"
# set +x

exit "$exit_val"
